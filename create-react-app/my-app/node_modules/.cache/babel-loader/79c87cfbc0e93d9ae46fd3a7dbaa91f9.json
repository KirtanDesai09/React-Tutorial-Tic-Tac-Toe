{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\kd_11777\\\\Documents\\\\GitHub\\\\create-react-app\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kd_11777\\\\Documents\\\\GitHub\\\\create-react-app\\\\my-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\" + (props.isWinning ? \"square--winning\" : null),\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return React.createElement(Square, {\n      isWinning: this.props.calculateWinner.includes(i),\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    });\n  }\n\n  renderSquares() {\n    let row = [];\n    let k = 0;\n\n    for (let i = 0; i < 3; i++) {\n      const col = [];\n\n      for (let j = 0; j < 3; j++) {\n        col.push(this.renderSquare(3 * i + j));\n        k++;\n      }\n\n      row.push(React.createElement(\"div\", {\n        key: k,\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, col));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, row);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, this.renderSquares()));\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xTurn: true,\n      stepNumber: 0\n    };\n  }\n\n  handleClick(i) {\n    const locations = [[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [2, 3], [3, 1], [3, 2], [3, 3]];\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return {\n        player: squares[a],\n        line: [a, b, c]\n      };\n    }\n\n    squares[i] = this.state.xTurn ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        locations: locations[i]\n      }]),\n      stepNumber: history.length,\n      xTurn: !this.state.xTurn\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xTurn: step % 2 === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move: ' + move + \" location: \" + history[move].locations : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, move === this.state.stepNumber ? React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, desc) : desc));\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xTurn ? 'X' : 'O');\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, moves)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 162\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/kd_11777/Documents/GitHub/create-react-app/my-app/src/index.js"],"names":["React","ReactDOM","Square","props","isWinning","onClick","value","Board","Component","renderSquare","i","calculateWinner","includes","squares","renderSquares","row","k","col","j","push","render","Game","constructor","state","history","Array","fill","xTurn","stepNumber","handleClick","locations","slice","current","length","player","a","line","b","c","setState","concat","jumpTo","step","winner","moves","map","move","desc","status","lines","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n      return (\r\n        <button \r\n            className={\"square\" + (props.isWinning ? \"square--winning\" : null)} \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n      );\r\n    }\r\n  \r\n  class Board extends React.Component {    \r\n    renderSquare(i) {\r\n      return (\r\n      <Square \r\n      isWinning={this.props.calculateWinner.includes(i)}\r\n      value={this.props.squares[i]}\r\n      onClick={() => this.props.onClick(i)}\r\n      />\r\n      );\r\n    }\r\n    renderSquares() {\r\n      let row = [];\r\n      let k =0;\r\n      for(let i = 0; i < 3; i++) {\r\n        const col = [];\r\n        for(let j = 0; j < 3; j++) {\r\n          col.push(this.renderSquare(3*i+j));\r\n          k++;\r\n        }\r\n        row.push(<div key={k} className=\"board-row\">{col}</div>);\r\n      }\r\n      return(<div>{row}</div>);\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquares()}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props){\r\n      super(props)\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n        }],\r\n        xTurn: true,\r\n        stepNumber: 0,\r\n      };\r\n    }\r\n\r\n    handleClick(i) {\r\n      const locations = [\r\n        [1,1],\r\n        [1,2],\r\n        [1,3],\r\n        [2,1],\r\n        [2,2],\r\n        [2,3],\r\n        [3,1],\r\n        [3,2],\r\n        [3,3]\r\n      ];\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      if (calculateWinner(squares) || squares[i]){\r\n          return  {player: squares[a], line: [a, b, c] };\r\n      }\r\n      squares[i] = this.state.xTurn ? 'X' : 'O';\r\n      this.setState({\r\n        history: history.concat([{\r\n          squares: squares,\r\n          locations: locations[i],\r\n        }]),\r\n        stepNumber: history.length,\r\n          xTurn: !this.state.xTurn,\r\n      });\r\n    }\r\n\r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xTurn: (step % 2) === 0,\r\n      });\r\n    }\r\n\r\n    render() {\r\n\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n\r\n      const moves = history.map((step,move) => {\r\n        const desc = move ?\r\n        'Go to move: ' + move + \" location: \" + history[move].locations:\r\n        'Go to game start';\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>\r\n            {move === this.state.stepNumber ? <b>{desc}</b> : desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n\r\n      let status;\r\n      if (winner) {\r\n          status = 'Winner: ' + winner;\r\n      }\r\n      else {\r\n          status = 'Next player: ' + (this.state.xTurn ? 'X' : 'O');\r\n      }\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n            squares = {current.squares}\r\n            onClick={(i) => this.handleClick(i)}/>\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  function calculateWinner(squares) {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n      ];\r\n      for (let i = 0; i < lines.length; i++){\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n        }\r\n        return null;\r\n    }\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );"]},"metadata":{},"sourceType":"module"}